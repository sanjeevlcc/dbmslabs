



Functional Dependency and Normalisation







====================================================================================
https://industri.fatek.unpatti.ac.id/wp-content/uploads/2019/03/162-Introduction-to-Database-Management-System-Satinder-Bal-Gupta-Aditya-Mittal-Edisi-2-2017.pdf



_Page NO: 212
====================================================================================




====================================================================================
 Database Normalization
====================================================================================
Normalization is a database design technique that reduces data redundancy and eliminates 
undesirable characteristics like Insertion, Update and Deletion Anomalies. 

Normalization rules divides larger tables into smaller tables and links them using relationships. 

The purpose ofNormalisation in SQL is to eliminate redundant (repetitive) data and ensure data
is stored logically.

            A large database defined as a single relation may result in data duplication. 
            This repetition of data may result in:
            
                Making relations very large.
                It isn't easy to maintain and update data as it would involve searching many                             records in relation.
                Wastage and poor utilization of disk space and resources.
                The likelihood of errors and inconsistencies increases.
            
            
            So to handle these problems, we should analyze and decompose the relations with 
            redundant data into smaller, simpler, and well-structured relations that are 
            satisfy desirable properties. 

            Normalization is a process of decomposing the relations into relations with fewer 
            attributes.

------------------------DOCKER------------------------------
step 1: Login with credentials in ... https://killercoda.com/
step 2: Choose any scnerio. Ubuntu or CKA or Playground
step 3: docker run --name mydb1 -e MYSQL_ROOT_PASSWORD=1234 -d mysql
step 4: docker exec -ti mydb1 mysql -u root -p1234
step 5: mysql -u root -p1234
----------------------------------------------------------------

mysql> create database db33;
Query OK, 1 row affected (0.02 sec)

mysql> use db33;
Database changed

CREATE TABLE PatientRecords (
    PatientID INT PRIMARY KEY NOT NULL,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Gender VARCHAR(10) NOT NULL,
    Age INT NOT NULL,
    Address VARCHAR(100) NOT NULL,
    PhoneNumber VARCHAR(15) NOT NULL,
    AdmissionDate DATE NOT NULL,
    DischargeDate DATE,
    DoctorName VARCHAR(50) NOT NULL,
    Diagnosis VARCHAR(100) NOT NULL,
    RoomNumber INT NOT NULL
);

INSERT INTO PatientRecords VALUES
(1, 'Sajan', 'Shrestha', 'Male', 32, 'Kathmandu, Nepal', '9876543210', '2023-01-15', '2023-01-25', 'Dr. Sharma', 'Common Cold', 101),
(2, 'Aarati', 'Dahal', 'Female', 45, 'Pokhara, Nepal', '9843210765', '2023-02-02', '2023-02-10', 'Dr. Khanal', 'Hypertension', 203),
(3, 'Rajendra', 'Gurung', 'Male', 28, 'Biratnagar, Nepal', '9812345678', '2023-03-12', '2023-03-20', 'Dr. Bhattarai', 'Gastritis', 302),
(4, 'Sunita', 'Magar', 'Female', 60, 'Butwal, Nepal', '9867543210', '2023-04-05', '2023-04-15', 'Dr. Thapa', 'Arthritis', 105),
(5, 'Bibek', 'Dhakal', 'Male', 38, 'Dharan, Nepal', '9801234567', '2023-05-20', '2023-06-02', 'Dr. Acharya', 'Diabetes', 201);



mysql> select * from PatientRecords;          // to long table attributes
+-----------+-----------+----------+--------+-----+-------------------+-------------+---------------+---------------+---------------+--------------+------------+
| PatientID | FirstName | LastName | Gender | Age | Address           | PhoneNumber | AdmissionDate | DischargeDate | DoctorName    | Diagnosis    | RoomNumber |
+-----------+-----------+----------+--------+-----+-------------------+-------------+---------------+---------------+---------------+--------------+------------+


mysql> select * from PatientRecords;
+-----------+-----------+----------+--------+-----+-------------------+-------------+---------------+---------------+---------------+--------------+------------+
| PatientID | FirstName | LastName | Gender | Age | Address           | PhoneNumber | AdmissionDate | DischargeDate | DoctorName    | Diagnosis    | RoomNumber |
+-----------+-----------+----------+--------+-----+-------------------+-------------+---------------+---------------+---------------+--------------+------------+
|         1 | Sajan     | Shrestha | Male   |  32 | Kathmandu, Nepal  | 9876543210  | 2023-01-15    | 2023-01-25    | Dr. Sharma    | Common Cold  |        101 |
|         2 | Aarati    | Dahal    | Female |  45 | Pokhara, Nepal    | 9843210765  | 2023-02-02    | 2023-02-10    | Dr. Khanal    | Hypertension |        203 |
|         3 | Rajendra  | Gurung   | Male   |  28 | Biratnagar, Nepal | 9812345678  | 2023-03-12    | 2023-03-20    | Dr. Bhattarai | Gastritis    |        302 |
|         4 | Sunita    | Magar    | Female |  60 | Butwal, Nepal     | 9867543210  | 2023-04-05    | 2023-04-15    | Dr. Thapa     | Arthritis    |        105 |
|         5 | Bibek     | Dhakal   | Male   |  38 | Dharan, Nepal     | 9801234567  | 2023-05-20    | 2023-06-02    | Dr. Acharya   | Diabetes     |        201 |
+-----------+-----------+----------+--------+-----+-------------------+-------------+---------------+---------------+---------------+--------------+------------+
5 rows in set (0.00 sec)





let's normalize the PatientRecords table up to the Third Normal Form (3NF). 
-+---------------+---------------+--------------+------------+

-- Create Doctor table
CREATE TABLE Doctors (
    DoctorID INT PRIMARY KEY,
    DoctorName VARCHAR(50) UNIQUE
);

-- Create Diagnoses table
CREATE TABLE Diagnoses (
    DiagnosisID INT PRIMARY KEY,
    DiagnosisName VARCHAR(100) UNIQUE
);

-- Create PatientRecords table with foreign keys
CREATE TABLE PatientRecords1 (
    PatientID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Gender VARCHAR(10),
    Age INT,
    Address VARCHAR(100),
    PhoneNumber VARCHAR(15),
    AdmissionDate DATE,
    DischargeDate DATE,
    DoctorID INT,
    DiagnosisID INT,
    RoomNumber INT,
    FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID),
    FOREIGN KEY (DiagnosisID) REFERENCES Diagnoses(DiagnosisID)
);


mysql> desc Doctors;
+------------+-------------+------+-----+---------+-------+
| Field      | Type        | Null | Key | Default | Extra |
+------------+-------------+------+-----+---------+-------+
| DoctorID   | int         | NO   | PRI | NULL    |       |
| DoctorName | varchar(50) | YES  | UNI | NULL    |       |
+------------+-------------+------+-----+---------+-------+
2 rows in set (0.01 sec)

mysql> desc Diagnoses;
+---------------+--------------+------+-----+---------+-------+
| Field         | Type         | Null | Key | Default | Extra |
+---------------+--------------+------+-----+---------+-------+
| DiagnosisID   | int          | NO   | PRI | NULL    |       |
| DiagnosisName | varchar(100) | YES  | UNI | NULL    |       |
+---------------+--------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> desc PatientRecords1;
+---------------+--------------+------+-----+---------+-------+
| Field         | Type         | Null | Key | Default | Extra |
+---------------+--------------+------+-----+---------+-------+
| PatientID     | int          | NO   | PRI | NULL    |       |
| FirstName     | varchar(50)  | YES  |     | NULL    |       |
| LastName      | varchar(50)  | YES  |     | NULL    |       |
| Gender        | varchar(10)  | YES  |     | NULL    |       |
| Age           | int          | YES  |     | NULL    |       |
| Address       | varchar(100) | YES  |     | NULL    |       |
| PhoneNumber   | varchar(15)  | YES  |     | NULL    |       |
| AdmissionDate | date         | YES  |     | NULL    |       |
| DischargeDate | date         | YES  |     | NULL    |       |
| DoctorID      | int          | YES  | MUL | NULL    |       |
| DiagnosisID   | int          | YES  | MUL | NULL    |       |
| RoomNumber    | int          | YES  |     | NULL    |       |
+---------------+--------------+------+-----+---------+-------+
12 rows in set (0.01 sec)





-- Insert data into Doctors table
INSERT INTO Doctors VALUES
(1, 'Dr. Sharma'),
(2, 'Dr. Khanal'),
(3, 'Dr. Bhattarai'),
(4, 'Dr. Thapa'),
(5, 'Dr. Acharya');




-- Insert data into Diagnoses table
INSERT INTO Diagnoses VALUES
(101, 'Common Cold'),
(203, 'Hypertension'),
(302, 'Gastritis'),
(105, 'Arthritis'),
(201, 'Diabetes');



-- Insert data into PatientRecords table with foreign keys
INSERT INTO PatientRecords1 VALUES
(1, 'Sajan', 'Shrestha', 'Male', 32, 'Kathmandu, Nepal', '9876543210', '2023-01-15', '2023-01-25', 1, 101, 101),
(2, 'Aarati', 'Dahal', 'Female', 45, 'Pokhara, Nepal', '9843210765', '2023-02-02', '2023-02-10', 2, 203, 203),
(3, 'Rajendra', 'Gurung', 'Male', 28, 'Biratnagar, Nepal', '9812345678', '2023-03-12', '2023-03-20', 3, 302, 302),
(4, 'Sunita', 'Magar', 'Female', 60, 'Butwal, Nepal', '9867543210', '2023-04-05', '2023-04-15', 4, 105, 105),
(5, 'Bibek', 'Dhakal', 'Male', 38, 'Dharan, Nepal', '9801234567', '2023-05-20', '2023-06-02', 5, 201, 201);







mysql> select * from Doctors;
+----------+---------------+
| DoctorID | DoctorName    |
+----------+---------------+
|        5 | Dr. Acharya   |
|        3 | Dr. Bhattarai |
|        2 | Dr. Khanal    |
|        1 | Dr. Sharma    |
|        4 | Dr. Thapa     |
+----------+---------------+
5 rows in set (0.00 sec)

mysql> select * from Diagnoses;
+-------------+---------------+
| DiagnosisID | DiagnosisName |
+-------------+---------------+
|         105 | Arthritis     |
|         101 | Common Cold   |
|         201 | Diabetes      |
|         302 | Gastritis     |
|         203 | Hypertension  |
+-------------+---------------+
5 rows in set (0.00 sec)

mysql> select * from PatientRecords1;
+-----------+-----------+----------+--------+------+-------------------+-------------+---------------+---------------+----------+-------------+------------+
| PatientID | FirstName | LastName | Gender | Age  | Address           | PhoneNumber | AdmissionDate | DischargeDate | DoctorID | DiagnosisID | RoomNumber |
+-----------+-----------+----------+--------+------+-------------------+-------------+---------------+---------------+----------+-------------+------------+
|         1 | Sajan     | Shrestha | Male   |   32 | Kathmandu, Nepal  | 9876543210  | 2023-01-15    | 2023-01-25    |        1 |         101 |        101 |
|         2 | Aarati    | Dahal    | Female |   45 | Pokhara, Nepal    | 9843210765  | 2023-02-02    | 2023-02-10    |        2 |         203 |        203 |
|         3 | Rajendra  | Gurung   | Male   |   28 | Biratnagar, Nepal | 9812345678  | 2023-03-12    | 2023-03-20    |        3 |         302 |        302 |
|         4 | Sunita    | Magar    | Female |   60 | Butwal, Nepal     | 9867543210  | 2023-04-05    | 2023-04-15    |        4 |         105 |        105 |
|         5 | Bibek     | Dhakal   | Male   |   38 | Dharan, Nepal     | 9801234567  | 2023-05-20    | 2023-06-02    |        5 |         201 |        201 |
+-----------+-----------+----------+--------+------+-------------------+-------------+---------------+---------------+----------+-------------+------------+
5 rows in set (0.00 sec)



CHECK REDUNDANCY
+-----------+-----------+----------+-------

mysql> INSERT INTO PatientRecords1 VALUES
      (4, 'Sunita', 'Magar', 'Female', 60, 'Butwal, Nepal', '9867543210', '2023-04-05', '2023-04-15', 4, 105, 105);
     ERROR 1062 (23000): Duplicate entry '4' for key 'PatientRecords1.PRIMARY'



mysql> INSERT INTO Diagnoses VALUES (201, 'Diabetes');
ERROR 1062 (23000): Duplicate entry '201' for key 'Diagnoses.PRIMARY'

mysql> INSERT INTO Diagnoses VALUES (209, 'Diabetes');
ERROR 1062 (23000): Duplicate entry 'Diabetes' for key 'Diagnoses.DiagnosisName'












====================================================================================
Why Do We Need Normalization?
====================================================================================

As we have discussed above, normalization is used to reduce data redundancy. 
It provides a method to remove the following anomalies from the database and bring it to a 
more consistent state:


     what is anomalies in dbms?
     ---------------------------
           something different, abnormal, peculiar, or not easily classified
           Anomalies are irregularities or inconsistencies that occur 
           in a database, disrupting the normal functioning and data integrity. 
           
           They are often a result of poor database design and can lead to significant 
           problems like data redundancy, data loss, and incorrect data.



A database anomaly is a flaw in the database that occurs because of poor planning and redundancy.

Insertion anomalies: 
---------------------
    This occurs when we are not able to insert data into a database because 
    some attributes may be missing at the time of insertion.

Updation anomalies: 
---------------------
    This occurs when the same data items are repeated with the same values and 
    are not linked to each other.

Deletion anomalies:  
---------------------
    This occurs when deleting one part of the data deletes the other necessary 
    information from the database.






CASE SCNERIO IN Insertion anomalies: 
-------------------------------------
                  mysql> select * from Doctors;
                  +----------+---------------+
                  | DoctorID | DoctorName    |
                  +----------+---------------+
                  |        5 | Dr. Acharya   |
                  |        3 | Dr. Bhattarai |
                  |        2 | Dr. Khanal    |
                  |        1 | Dr. Sharma    |
                  |        4 | Dr. Thapa     |
                  +----------+---------------+


                  mysql> select * from Diagnoses;
                  +-------------+---------------+
                  | DiagnosisID | DiagnosisName |
                  +-------------+---------------+
                  |         105 | Arthritis     |
                  |         101 | Common Cold   |
                  |         201 | Diabetes      |
                  |         302 | Gastritis     |
                  |         203 | Hypertension  |
                  +-------------+---------------+


-- Inserting a patient with a non-existing doctor ..... i.e id 10
mysql> INSERT INTO PatientRecords1 VALUES (6, 'Ram', 'Sharma', 'Male', 45, 'Pokhara, Nepal', '9812345678', '2023-06-15', '2023-06-25', 10, 203, 303);

ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`db33`.`PatientRecords1`, CONSTRAINT `PatientRecords1_ibfk_1` FOREIGN KEY (`DoctorID`) REFERENCES `Doctors` (`DoctorID`))






-- Inserting a patient with a non-existing diagnosis ..... i.e id 306
mysql> INSERT INTO PatientRecords1 VALUES (7, 'Gita', 'Rai', 'Female', 30, 'Birgunj, Nepal', '9876543210', '2023-07-01', '2023-07-10', 3, 306, 202);


ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`db33`.`PatientRecords1`, CONSTRAINT `PatientRecords1_ibfk_2` FOREIGN KEY (`DiagnosisID`) REFERENCES `Diagnoses` (`DiagnosisID`))






CASE SCNERIO IN  Updation anomalies: 
-------------------------------------
    Updating the name of a doctor results in inconsistencies across patient records.

DISPAY QUERY that patients relate to doctors

mysql>  SELECT PatientRecords1.FirstName, PatientRecords1.LastName, Doctors.DoctorName
    FROM PatientRecords1
    INNER JOIN Doctors ON PatientRecords1.DoctorID = Doctors.DoctorID;
                                  +-----------+----------+---------------+
                                  | FirstName | LastName | DoctorName    |
                                  +-----------+----------+---------------+
                                  | Sajan     | Shrestha | Dr. Sharma    |
                                  | Aarati    | Dahal    | Dr. Khanal    |
                                  | Rajendra  | Gurung   | Dr. Bhattarai |
                                  | Sunita    | Magar    | Dr. Thapa     |
                                  | Bibek     | Dhakal   | Dr. Acharya   |
                                  +-----------+----------+---------------+


                             OR
                             
                             SELECT 
                               CONCAT(FirstName, ' ', LastName) AS PatientName,
                               Doctors.DoctorName
                             FROM PatientRecords1
                             INNER JOIN Doctors ON PatientRecords1.DoctorID = Doctors.DoctorID;
                             
                                 +-----------------+---------------+
                                 | PatientName     | DoctorName    |
                                 +-----------------+---------------+
                                 | Sajan Shrestha  | Dr. Sharma    |
                                 | Aarati Dahal    | Dr. Khanal    |
                                 | Rajendra Gurung | Dr. Bhattarai |
                                 | Sunita Magar    | Dr. Thapa     |
                                 | Bibek Dhakal    | Dr. Acharya   |
                                 +-----------------+---------------+


-- Update doctor's name ....
NOW ALL RECORD RELATE TO CHANGE "Dr. Bhattarai" TO "Dr. Pokharel"

mysql> UPDATE Doctors
     SET DoctorName = 'Dr. Pokharel'
     WHERE DoctorID = 3;
Query OK, 1 row affected (0.00 sec)



                                           mysql> select * from Doctors;
                                           +----------+--------------+
                                           | DoctorID | DoctorName   |
                                           +----------+--------------+
                                           |        5 | Dr. Acharya  |
                                           |        2 | Dr. Khanal   |
                                           |        3 | Dr. Pokharel |
                                           |        1 | Dr. Sharma   |
                                           |        4 | Dr. Thapa    |
                                           +----------+--------------+
                                           5 rows in set (0.00 sec)



SELECT PatientRecords1.FirstName, PatientRecords1.LastName, Doctors.DoctorName
    FROM PatientRecords1
    INNER JOIN Doctors ON PatientRecords1.DoctorID = Doctors.DoctorID;

                                     +-----------+----------+--------------+
                                     | FirstName | LastName | DoctorName   |
                                     +-----------+----------+--------------+
                                     | Sajan     | Shrestha | Dr. Sharma   |
                                     | Aarati    | Dahal    | Dr. Khanal   |
                                     | Rajendra  | Gurung   | Dr. Pokharel |
                                     | Sunita    | Magar    | Dr. Thapa    |
                                     | Bibek     | Dhakal   | Dr. Acharya  |
                                     +-----------+----------+--------------+




CASE SCNERIO IN Deletion anomalies:  
-------------------------------------

Deleting a doctor or diagnosis without considering patient records

-- Deleting a doctor without considering patient records
DELETE FROM Doctors
WHERE DoctorID = 4;

-- Deleting a diagnosis without considering patient records
DELETE FROM Diagnoses
WHERE DiagnosisID = 105;



mysql> select * from Doctors;
                          +----------+--------------+
                          | DoctorID | DoctorName   |
                          +----------+--------------+
                          |        5 | Dr. Acharya  |
                          |        2 | Dr. Khanal   |
                          |        3 | Dr. Pokharel |
                          |        1 | Dr. Sharma   |
                          |        4 | Dr. Thapa    |
                          +----------+--------------+


mysql> DELETE FROM Doctors
    -> WHERE DoctorID = 4;

ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`db33`.`PatientRecords1`, CONSTRAINT `PatientRecords1_ibfk_1` FOREIGN KEY (`DoctorID`) REFERENCES `Doctors` (`DoctorID`))



mysql> select * from Diagnoses;
                         +-------------+---------------+
                         | DiagnosisID | DiagnosisName |
                         +-------------+---------------+
                         |         105 | Arthritis     |
                         |         101 | Common Cold   |
                         |         201 | Diabetes      |
                         |         302 | Gastritis     |
                         |         203 | Hypertension  |
                         +-------------+---------------+


mysql> DELETE FROM Diagnoses
    -> WHERE DiagnosisID = 105;


ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`db33`.`PatientRecords1`, CONSTRAINT `PatientRecords1_ibfk_2` FOREIGN KEY (`DiagnosisID`) REFERENCES `Diagnoses` (`DiagnosisID`))










====================================================================================
Database Normal Forms
====================================================================================
      The inventor of the relational model Edgar Codd proposed the 
      theory of normalization of data with the introduction of the First Normal Form, 
      and he continued to extend theory with Second and Third Normal Form. 
      
      Later he joined Raymond F. Boyce to develop the theory of Boyce-Codd Normal Form.

Database Normal Forms
----------------------------
                1NF (First Normal Form)
                2NF (Second Normal Form)
                3NF (Third Normal Form)
                BCNF (Boyce-Codd Normal Form)
                4NF (Fourth Normal Form)
                5NF (Fifth Normal Form)
                6NF (Sixth Normal Form)

The Theory of Data Normalization in MySQL server is still being developed further. 
For example, there are discussions even on 6th Normal Form. 

However, in most practical applications, normalization achieves its best in 3rd Normal Form. 


Normal Form	Description
---------------------------
1NF	
     A relation is in 1NF if it contains an atomic value.

2NF	
     A relation will be in 2NF if it is in 1NF and 
     all non-key attributes are fully functional dependent on the primary key.

3NF	
     A relation will be in 3NF if it is in 2NF and 
     no transition dependency exists.

BCNF	
      A stronger definition of 3NF is known as Boyce Codd's normal form.

4NF	
      A relation will be in 4NF if it is in Boyce Codd's normal form
      and has no multi-valued dependency.

5NF	
      A relation is in 5NF. If it is in 4NF and does not contain any 
      join dependency, joining should be lossless.









====================================================================================
Advantages  and Disadvantages of Normalization
====================================================================================

Advantages of Normalization
------------------------------
          Normalization helps to minimize data redundancy.
          Greater overall database organization.
          Data consistency within the database.
          Much more flexible database design.
          Enforces the concept of relational integrity.

Disadvantages of Normalization
------------------------------
           You cannot start building the database before knowing what the user needs.
           The performance degrades when normalizing the relations to higher normal forms, 
           i.e., 4NF, 5NF.
           It is very time-consuming and difficult to normalize relations of a higher degree.
           Careless decomposition may lead to a bad database design, leading to serious problems.






====================================================================================
Database Keys
====================================================================================
             Super Key             
             Candidate Key
             Primary Key          
             Alternate Key
             Foreign Key
             Composite Key

 table t1 {emp_id, name, citizenship_id, email_id, department_id}


Super Key:
-----------------
         Any combination of possible attributes that uniquely identifies a tuple.
         It is a sublet of cndidate key
         
         Examples: 
         {emp_id} 
         {citizenship_id}
         {email_id}
         
         {emp_id, citizenship_id}
         {email_id, citizenship_id}
         {email_id, emp_id}
         
         {name, email_id}
         {emp_id,name, email_id}
         {emp_id, citizenship_id}, etc.


Candidate Key:
-----------------
         A minimal super key, meaning no subset of the key can uniquely identify a tuple.
         No NULL VALUES
         A attribute where PRIMARY key can be selected
         
         Examples: 
         {emp_id}, 
         {email_id}, 
         {emp_id, citizenship_id, email_id)
         {emp_id, citizenship_id}}
         { citizenship_id, email_id}etc.


Primary Key:
-----------------
         A candidate key chosen to be the main identifier for the table.
         It must be unique for each tuple and cannot contain NULL values.
         it serves as the main identifier for the table.
         
         Examples:
         {emp_id}, 
         
         {email_id}



Alternate Key:
-----------------
         Candidate keys that are not chosen as the primary key.
         Examples: 
                   If {emp_id} is chosen as the primary key, 
                   then {email_id} is an alternate key.
         
         {emp_id, name, citizenship_id, email_id, department_id}
         ---PK--------------AK------------AK-------------------


Foreign Key:
-----------------
         An attribute that refers to the primary key in another table.
         It enforces referential integrity between the two related tables.
         It establishes a link between two tables by referencing the 
            primary key in another table.
         
         Examples: 
         If there is another table with a primary key, 
         say {dept_id}, and department_id in t1 refers to {dept_id}, 
         then it is a foreign key.


Composite Key:
-----------------
         A key that consists of more than one attribute.
         
         Examples: 
         {emp_id, email_id}, {name, citizenship_id, department_id}

====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



====================================================================================

====================================================================================



